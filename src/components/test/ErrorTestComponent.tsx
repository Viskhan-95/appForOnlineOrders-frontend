import React from "react";
import { View, Text, StyleSheet, TouchableOpacity } from "react-native";
import { COLORS } from "../../utils/constants/colors";
import { SIZES } from "../../utils/constants/sizes";
import { rw, rh } from "../../utils/responsive";
import useBackendErrorHandler from "../../hooks/useBackendErrorHandler";

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ—Ç backend
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ
 */
const ErrorTestComponent: React.FC = () => {
    const {
        handleRegistrationError,
        handleLoginError,
        handlePasswordResetError,
    } = useBackendErrorHandler();

    if (!__DEV__) {
        return null;
    }

    const testRegistrationError = () => {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
        const mockError = {
            response: {
                status: 409,
                data: {
                    message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç",
                    code: "EMAIL_EXISTS",
                },
            },
        };
        handleRegistrationError(mockError);
    };

    const testLoginError = () => {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        const mockError = {
            response: {
                status: 401,
                data: {
                    message: "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                    code: "INVALID_CREDENTIALS",
                },
            },
        };
        handleLoginError(mockError);
    };

    const testPasswordResetError = () => {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        const mockError = {
            response: {
                status: 404,
                data: {
                    message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    code: "USER_NOT_FOUND",
                },
            },
        };
        handlePasswordResetError(mockError);
    };

    const testValidationError = () => {
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        const mockError = {
            response: {
                status: 422,
                data: {
                    message: "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤",
                    code: "VALIDATION_ERROR",
                    field: "password",
                },
            },
        };
        handleRegistrationError(mockError);
    };

    return (
        <View style={styles.container}>
            <Text style={styles.title}>üß™ –¢–µ—Å—Ç –æ—à–∏–±–æ–∫ Backend</Text>
            <Text style={styles.subtitle}>–¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (__DEV__)</Text>

            <View style={styles.buttonsContainer}>
                <TouchableOpacity
                    style={styles.button}
                    onPress={testRegistrationError}
                >
                    <Text style={styles.buttonText}>
                        –¢–µ—Å—Ç: Email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    </Text>
                </TouchableOpacity>

                <TouchableOpacity
                    style={styles.button}
                    onPress={testLoginError}
                >
                    <Text style={styles.buttonText}>
                        –¢–µ—Å—Ç: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ö–æ–¥–∞
                    </Text>
                </TouchableOpacity>

                <TouchableOpacity
                    style={styles.button}
                    onPress={testPasswordResetError}
                >
                    <Text style={styles.buttonText}>
                        –¢–µ—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
                    </Text>
                </TouchableOpacity>

                <TouchableOpacity
                    style={styles.button}
                    onPress={testValidationError}
                >
                    <Text style={styles.buttonText}>
                        –¢–µ—Å—Ç: –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                    </Text>
                </TouchableOpacity>
            </View>
        </View>
    );
};

const styles = StyleSheet.create({
    container: {
        backgroundColor: COLORS.surface,
        borderRadius: SIZES.borderRadius.medium,
        padding: SIZES.padding.md,
        margin: SIZES.margin.md,
        borderWidth: 2,
        borderColor: COLORS.primary,
    },
    title: {
        fontSize: SIZES.fontSize.lg,
        fontWeight: "bold",
        color: COLORS.text,
        textAlign: "center",
        marginBottom: SIZES.margin.sm,
    },
    subtitle: {
        fontSize: SIZES.fontSize.xs,
        color: COLORS.textSecondary,
        textAlign: "center",
        marginBottom: SIZES.margin.md,
        fontStyle: "italic",
    },
    buttonsContainer: {
        gap: SIZES.margin.sm,
    },
    button: {
        backgroundColor: COLORS.primary,
        borderRadius: SIZES.borderRadius.medium,
        paddingVertical: SIZES.padding.sm,
        paddingHorizontal: SIZES.padding.md,
        alignItems: "center",
    },
    buttonText: {
        fontSize: SIZES.fontSize.sm,
        fontWeight: "600",
        color: COLORS.background,
    },
});

export default ErrorTestComponent;
