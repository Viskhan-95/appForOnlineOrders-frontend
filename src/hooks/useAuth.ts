import { useCallback } from "react";
import { useAppDispatch, useAppSelector } from "../store";
import {
    loginUser,
    registerUser,
    registerStart,
    registerVerify,
    logoutUser,
    refreshToken,
    getMe,
    restoreSession,
    clearError,
    clearAuth,
} from "../store/slices/authSlice";
import {
    LoginRequest,
    RegisterRequest,
    RegisterStartRequest,
    RegisterVerifyRequest,
    ResetPasswordRequest,
    ResetVerifyRequest,
    ResetConfirmRequest,
} from "../types/auth";

export const useAuth = () => {
    const dispatch = useAppDispatch();
    const authState = useAppSelector((state) => state.auth);

    // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    const login = useCallback(
        (credentials: LoginRequest) => {
            return dispatch(loginUser(credentials));
        },
        [dispatch]
    );

    const register = useCallback(
        (userData: RegisterRequest) => {
            return dispatch(registerUser(userData));
        },
        [dispatch]
    );

    const logout = useCallback(() => {
        return dispatch(logoutUser());
    }, [dispatch]);

    // –ü–æ—à–∞–≥–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    const startRegistration = useCallback(
        (data: RegisterStartRequest) => {
            return dispatch(registerStart(data));
        },
        [dispatch]
    );

    const verifyRegistration = useCallback(
        (data: RegisterVerifyRequest) => {
            return dispatch(registerVerify(data));
        },
        [dispatch]
    );

    // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
    const requestPasswordReset = useCallback(
        (data: ResetPasswordRequest) => {
            // TODO: –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ thunks –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
            return dispatch(registerStart({ email: data.email }));
        },
        [dispatch]
    );

    const verifyResetCode = useCallback(
        (data: ResetVerifyRequest) => {
            // TODO: –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ thunks –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
            return dispatch(registerStart({ email: data.email }));
        },
        [dispatch]
    );

    const confirmPasswordReset = useCallback(
        (data: ResetConfirmRequest) => {
            // TODO: –°–æ–∑–¥–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ thunks –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è
            return dispatch(registerStart({ email: "" })); // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        },
        [dispatch]
    );

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏
    const refreshAuthToken = useCallback(() => {
        return dispatch(refreshToken());
    }, [dispatch]);

    const fetchUserData = useCallback(() => {
        return dispatch(getMe());
    }, [dispatch]);

    const restoreAuthSession = useCallback(() => {
        return dispatch(restoreSession());
    }, [dispatch]);

    // –£—Ç–∏–ª–∏—Ç—ã
    const clearAuthError = useCallback(() => {
        dispatch(clearError());
    }, [dispatch]);

    const clearAuthState = useCallback(() => {
        dispatch(clearAuth());
    }, [dispatch]);

    // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const isLoggedIn = authState.isAuthenticated && authState.user !== null;
    const hasTokens = authState.tokens !== null;
    const canRefresh = hasTokens && authState.tokens?.refreshToken;

    // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
    const hasRole = useCallback(
        (role: "SUPERADMIN" | "ADMIN" | "USER") => {
            return authState.user?.role === role;
        },
        [authState.user]
    );

    const isAdmin = hasRole("ADMIN") || hasRole("SUPERADMIN");
    const isSuperAdmin = hasRole("SUPERADMIN");

    // üîí –ü—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    const canAccessAdmin = isAdmin;
    const canAccessSuperAdmin = isSuperAdmin;

    return {
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        ...authState,
        isLoggedIn,
        hasTokens,
        canRefresh,

        // –ú–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        login,
        register,
        logout,

        // –ü–æ—à–∞–≥–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        startRegistration,
        verifyRegistration,

        // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è
        requestPasswordReset,
        verifyResetCode,
        confirmPasswordReset,

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏
        refreshAuthToken,
        fetchUserData,
        restoreAuthSession,

        // –£—Ç–∏–ª–∏—Ç—ã
        clearAuthError,
        clearAuthState,

        // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
        hasRole,
        isAdmin,
        isSuperAdmin,
        canAccessAdmin,
        canAccessSuperAdmin,
    };
};

export default useAuth;
