import { AxiosInstance, AxiosResponse, AxiosError } from "axios";
import { baseApiClient } from "./axiosConfig";
import { store } from "../store";
import ErrorService from "./errorService";
import RetryService from "./retryService";

// API –∫–ª–∏–µ–Ω—Ç —Å –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä–∞–º–∏
const apiClient: AxiosInstance = baseApiClient;

// –î–æ–±–∞–≤–ª—è–µ–º retry interceptor
const retryInterceptor = RetryService.createRetryInterceptor({
    maxRetries: 3,
    baseDelay: 1000,
    maxDelay: 5000,
    onRetry: (attempt, error) => {
        if (__DEV__) {
            console.log(`üîÑ Retrying API request (attempt ${attempt}):`, {
                url: error.config?.url,
                method: error.config?.method,
                status: error.response?.status,
            });
        }
    },
});

apiClient.interceptors.response.use(
    retryInterceptor.onFulfilled,
    retryInterceptor.onRejected
);

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
apiClient.interceptors.request.use(
    (config) => {
        const state = store.getState();
        const accessToken = state.auth.tokens?.accessToken;

        if (accessToken) {
            config.headers.Authorization = `Bearer ${accessToken}`;
        }

        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
apiClient.interceptors.response.use(
    (response: AxiosResponse) => response,
    async (error) => {
        const originalRequest = error.config;

        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ 401 –∏ —ç—Ç–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        if (error.response?.status === 401 && !originalRequest._retry) {
            originalRequest._retry = true;

            try {
                const state = store.getState();
                const refreshToken = state.auth.tokens?.refreshToken;

                if (refreshToken) {
                    // –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
                    const response = await baseApiClient.post("/auth/refresh", {
                        refreshToken,
                    });

                    const { accessToken, refreshToken: newRefreshToken } =
                        response.data;

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ store
                    store.dispatch({
                        type: "auth/refreshToken/fulfilled",
                        payload: response.data,
                    });

                    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                    originalRequest.headers.Authorization = `Bearer ${accessToken}`;
                    return apiClient(originalRequest);
                }
            } catch (refreshError) {
                // –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å–∏—Å—Ç–µ–º—ã
                store.dispatch({ type: "auth/logout/fulfilled" });
            }
        }

        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        ErrorService.logError(error, "API Response Interceptor");

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        const processedError = ErrorService.handleApiError(error);

        return Promise.reject(processedError);
    }
);

export default apiClient;
