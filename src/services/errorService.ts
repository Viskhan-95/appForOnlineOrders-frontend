import metricsService from "./metricsService";

export interface ErrorDetails {
    message: string;
    code?: string;
    statusCode?: number;
    field?: string;
}

export class ErrorService {
    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
     */
    static handleApiError(error: any): ErrorDetails {
        // Axios –æ—à–∏–±–∫–∏
        if (error.response) {
            const { status, data } = error.response;

            switch (status) {
                case 400:
                    return {
                        message: data?.message || "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                        statusCode: status,
                        code: data?.code,
                        field: data?.field,
                    };

                case 401:
                    return {
                        message: "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
                        statusCode: status,
                        code: "UNAUTHORIZED",
                    };

                case 403:
                    return {
                        message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω",
                        statusCode: status,
                        code: "FORBIDDEN",
                    };

                case 404:
                    return {
                        message: "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω",
                        statusCode: status,
                        code: "NOT_FOUND",
                    };

                case 422:
                    return {
                        message: data?.message || "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                        statusCode: status,
                        code: "VALIDATION_ERROR",
                        field: data?.field,
                    };

                case 429:
                    return {
                        message: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                        statusCode: status,
                        code: "RATE_LIMITED",
                    };

                case 500:
                    return {
                        message: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
                        statusCode: status,
                        code: "INTERNAL_ERROR",
                    };

                default:
                    return {
                        message: data?.message || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
                        statusCode: status,
                        code: data?.code,
                    };
            }
        }

        // –û—à–∏–±–∫–∏ —Å–µ—Ç–∏
        if (error.request) {
            return {
                message: "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É",
                code: "NETWORK_ERROR",
            };
        }

        // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        return {
            message: error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
            code: "UNKNOWN_ERROR",
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
     */
    static getUserFriendlyMessage(error: ErrorDetails): string {
        const { message, code } = error;

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
        switch (code) {
            case "NETWORK_ERROR":
                return "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";

            case "RATE_LIMITED":
                return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.";

            case "VALIDATION_ERROR":
                return message;

            case "UNAUTHORIZED":
                return "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.";

            case "FORBIDDEN":
                return "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.";

            default:
                return message;
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
     */
    static logError(error: any, context?: string): void {
        if (__DEV__) {
            console.group(`üö® Error${context ? ` in ${context}` : ""}`);
            console.error("Original error:", error);
            console.error("Processed error:", this.handleApiError(error));
            console.groupEnd();
        }
    }

    /**
     * –ó–∞–ø–∏—Å–∞—Ç—å –æ—à–∏–±–∫—É –≤ –º–µ—Ç—Ä–∏–∫–∏
     */
    static async recordError(
        error: any,
        context?: string,
        userId?: string,
        retryCount: number = 0
    ): Promise<string> {
        const errorDetails = this.handleApiError(error);
        return await metricsService.recordError(
            errorDetails,
            context,
            userId,
            retryCount
        );
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –æ—à–∏–±–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    static isValidationError(error: ErrorDetails): boolean {
        return error.code === "VALIDATION_ERROR" || error.statusCode === 422;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–π
     */
    static isNetworkError(error: ErrorDetails): boolean {
        return error.code === "NETWORK_ERROR";
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
     */
    static requiresReauth(error: ErrorDetails): boolean {
        return error.statusCode === 401 || error.code === "UNAUTHORIZED";
    }
}

export default ErrorService;
